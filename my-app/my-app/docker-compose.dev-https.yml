# Development Docker Compose with HTTPS support
# Solves Chrome HTTPS enforcement issues
version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    container_name: my-app-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000

      # Database (using host PostgreSQL)
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: 5432
      POSTGRES_DB: myapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password

      # Redis (using host Redis)
      REDIS_HOST: host.docker.internal
      REDIS_PORT: 6379

      # SAP Integration
      SAP_ENDPOINT: ${SAP_ENDPOINT}
      SAP_USERNAME: ${SAP_USERNAME}
      SAP_PASSWORD: ${SAP_PASSWORD}
      SAP_TIMEOUT: ${SAP_TIMEOUT:-10000}
      SAP_RETRIES: ${SAP_RETRIES:-3}
      SAP_VERIFY_SSL: ${SAP_VERIFY_SSL:-false}

      # CORS - Allow all origins
      CORS_ORIGIN: "*"
      CORS_CREDENTIALS: "true"

      # Logging
      LOG_LEVEL: info

    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - app_logs:/app/logs
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Nginx reverse proxy with HTTPS
  nginx:
    image: nginx:1.24-alpine
    container_name: my-app-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - app

volumes:
  app_logs:
  nginx_logs:

networks:
  app-network:
    driver: bridge
